[{"ID":521,"title":"How to Ignore the Needle Docs","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p>At PyCon 2014, I learned about a packaged called &#8220;needle&#8221; from Julien Phalip&#8217;s talk, <a href=\"http:\/\/www.pyvideo.org\/video\/2660\/advanced-techniques-for-web-functional-testing\" target=\"_blank\">Advanced techniques for Web functional testing<\/a>. When I tried using it with a Django project, I immediately ran into problems:<\/p>\n<ol>\n<li>The <a href=\"http:\/\/needle.readthedocs.org\/en\/latest\/\" target=\"_blank\">needle docs<\/a> aren&#8217;t written for Django, so they don&#8217;t explain how to use <code>NeedleTestCase<\/code> with <code>LiveServerTestCase<\/code>.<\/li>\n<li>I wasn&#8217;t using nose as my test runner, and didn&#8217;t want to start using it just to run Needle.<\/li>\n<\/ol>\n<p>The first problem turned out to be easy; use both:<\/p>\n<pre><code>class SiteTest(NeedleTestCase, LiveServerTestCase):\r\n    pass<\/code><\/pre>\n<p>The second problem wasn&#8217;t that bad either. If you examine the <a href=\"https:\/\/github.com\/bfirsh\/needle\/blob\/master\/needle\/plugin.py\" target=\"_blank\">Nose plugin<\/a> Needle adds, it just adds a\u00a0 <code>save_baseline<\/code> attribute to the test case.<\/p>\n<p>There were a lot of random hacks and tweaks I threw together. I think the best way to show them all is with an annotated example:<\/p>\n<pre><code>import os\r\nimport unittest\r\n\r\nfrom django.test import LiveServerTestCase\r\nfrom needle.cases import NeedleTestCase\r\n\r\n\r\n# This is a configuration variable for whether to save the baseline screenshot\r\n# or not. You can flip it by manually changing it, with an environment variable\r\n# check, or monkey patching.\r\nSAVE_BASELINE = False\r\n\r\n\r\n# You should be taking screenshots at multiple widths to capture all your\r\n# responsive breakpoints. Only the width really matter,s but I include the\r\n# height for completeness.\r\nSIZES = (\r\n    (1024, 800),  # desktop\r\n    (800, 600),  # tablet\r\n    (320, 540),  # mobile\r\n)\r\n\r\n\r\n# To keep the test runner from running slow needle tests every time, decorate\r\n# it. In this example, 'RUN_NEEDLE_TESTS' has to exist in your environment for\r\n# these tests to run. So you would run needle tests like:\r\n#\r\n#     RUN_NEEDLE_TESTS=1 python manage.py test python.import.path.to.test_needle\r\n@unittest.skipUnless('RUN_NEEDLE_TESTS' in os.environ, 'expensive tests')\r\nclass ScreenshotTest(NeedleTestCase, LiveServerTestCase):\r\n    # You're going to want to make sure your pages look consistent every time.\r\n    fixtures = ['needle.json']\r\n\r\n    @classmethod\r\n    def setUpClass(cls):\r\n        \"\"\"\r\n        Sets `save_baseline`.\r\n\r\n        I don't remember why I did it here. Maybe the timing didn't work when\r\n        I put it as an attribute on the test class.\r\n        \"\"\"\r\n        cls.save_baseline = SAVE_BASELINE\r\n        super(ScreenshotTest, cls).setUpClass()\r\n\r\n    def assertResponsive(self, scope, name):\r\n        \"\"\"Takes a screenshot for every responsive size you set.\"\"\"\r\n        for width, height in SIZES:\r\n            self.set_viewport_size(width=width, height=height)\r\n            try:\r\n                self.assertScreenshot(\r\n                    scope,\r\n                    # include the name and browser in the filename\r\n                    '{}_{}_firefox'.format(name, width)\r\n                )\r\n            except AssertionError as e:\r\n                print(e)\r\n                # suppress the error so needle keeps making screenshots. Needle\r\n                # is very fickle and we'll have to judge the screenshots by eye\r\n                # anyways instead of relying on needle's pixel perfect\r\n                # judgements.\r\n                pass\r\n\r\n    def test_homepage(self):\r\n        urls_to_test = (\r\n            ('\/', 'homepage'),\r\n            ('\/login\/', 'login'),\r\n            ('\/hamburger\/', 'meat'),\r\n            ('\/fries\/', 'potatoes'),\r\n            ('\/admin\/', 'admin'),\r\n        )\r\n        for url, name in urls_to_test:\r\n            self.driver.get(self.live_server_url + url)\r\n            self.assertResponsive(\r\n                # for now, I always want the full page, so I use 'html' as the\r\n                # scope for my screenshots. But as I document more things,\r\n                # that's likely to change.\r\n                'html',\r\n                # passing in a human readable name helps it generate\r\n                # screenshots file names that make more sense to me.\r\n                name,\r\n            )\r\n<\/code><\/pre>\n<p>Well I hope that that made sense.<\/p>\n<p>When you run the tests, they&#8217;re saved to the .\/screenshots\/ directory, which I keep out of source control because storing so many binary files is a heavy burden on git. We experimented with\u00a0 <code>git-annex<\/code><code><\/code> but it turned out to be more trouble than it was worth.<\/p>\n<p>My typical workflow goes like this:<\/p>\n<ol>\n<li>Make sure my reference baseline screenshots are up to date: <code>git checkout master &amp;&amp; grunt &amp;&amp; invoke needle --make<\/code><\/li>\n<li>Generate screenshots for my feature branch: <code>git checkout fat-buttons &amp;&amp; grunt &amp;&amp; invoke needle<\/code><\/li>\n<li>Open the screenshots directory and compare screenshots.<\/li>\n<\/ol>\n<p>In that workflow,\u00a0 <code>grunt<\/code> is used to generate css,\u00a0 <code>invoke<\/code> is used as my test runner, and\u00a0 <code>--make<\/code> is a flag I built into the needle invoke task to make baseline screenshots.<\/p>\n<p>Now I can quickly see if a change has the desired effect for multiple browser widths faster than it takes to actually resize a browser window. Bonus: I can see if a change has <strong>undesired<\/strong> effects on pages that I would have been too lazy to test manually.<\/p>\n<p>Next steps: I still haven&#8217;t figured out how to run the same test in multiple browsers.<\/p>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/how-to-ignore-the-needle-docs\/","date":"2014-06-25T20:53:35+06:00","modified":"2014-06-25T21:19:30+06:00","format":"standard","slug":"how-to-ignore-the-needle-docs","guid":"http:\/\/www.crccheck.com\/blog\/?p=521","excerpt":"<p>At PyCon 2014, I learned about a packaged called &#8220;needle&#8221; from Julien Phalip&#8217;s talk, Advanced techniques for Web functional testing. When I tried using it with a Django project, I immediately ran into problems: The needle docs aren&#8217;t written for Django, so they don&#8217;t explain how to use NeedleTestCase with LiveServerTestCase. I wasn&#8217;t using nose <a href=\"http:\/\/www.crccheck.com\/blog\/how-to-ignore-the-needle-docs\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2014-06-26T02:53:35+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2014-06-26T03:19:30+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/521","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/521\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/521\/revisions"}},"featured_image":null,"terms":{"category":[{"ID":21,"name":"Case Study","slug":"case-study","description":"","parent":null,"count":11,"link":"http:\/\/www.crccheck.com\/blog\/category\/case-study\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/21"}}},{"ID":4,"name":"Nerd","slug":"technical","description":"","parent":null,"count":35,"link":"http:\/\/www.crccheck.com\/blog\/category\/technical\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/4"}}}],"post_tag":[{"ID":52,"name":"django","slug":"django","description":"","parent":null,"count":6,"link":"http:\/\/www.crccheck.com\/blog\/tag\/django\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/51"}}},{"ID":69,"name":"testing","slug":"testing","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/testing\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/68"}}}]}},{"ID":519,"title":"Autobuilding Sphinx Docs","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p>So tonight I decided I&#8217;ve been putting it off far enough, and started my first Sphinx documentation project. Read The Docs&#8217;s <a href=\"http:\/\/read-the-docs.readthedocs.org\/en\/latest\/getting_started.html\" target=\"_blank\">Getting Started<\/a> guide wasn&#8217;t bad\u00a0 but it really bothered me that there wasn&#8217;t a good way to autobuild the docs.<\/p>\n<p>I ended up just adding this to the makefile:<\/p>\n<pre><code># If you don't have inotify-tools, install it first: `apt-get install inotify-tools`\r\nwatch:\r\n    @while true; do \\\r\n    inotifywait --recursive -e modify -e move -e create -e delete \\\r\n    --exclude $(BUILDDIR) . &amp;&amp; $(MAKE) --silent html; done\r\n<\/code><\/pre>\n<p><a href=\"http:\/\/jacobian.org\/writing\/auto-building-sphinx\/\" target=\"_blank\">This blog post<\/a> by JKM is often cited as a way to do it too, but the <code>install_requires<\/code> section of watchdog&#8217;s setup.py was longer than I felt like sitting through.<\/p>\n<p>There&#8217;s a promising project, <a href=\"https:\/\/pypi.python.org\/pypi\/sphinx-autobuild\/\" target=\"_blank\">sphinx-autobuild<\/a>, but the readme currently says &#8220;sphinx-autobuild relies on a not-yet-released version of python-livereload&#8221; and it also uses watchdog; so forget that. If I end up spending a lot of time writing docs, it&#8217;s worth getting this up and running though because it comes with LiveReload.<\/p>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/autobuilding-sphinx-docs\/","date":"2014-06-22T22:48:24+06:00","modified":"2014-06-22T22:48:24+06:00","format":"standard","slug":"autobuilding-sphinx-docs","guid":"http:\/\/www.crccheck.com\/blog\/?p=519","excerpt":"<p>So tonight I decided I&#8217;ve been putting it off far enough, and started my first Sphinx documentation project. Read The Docs&#8217;s Getting Started guide wasn&#8217;t bad\u00a0 but it really bothered me that there wasn&#8217;t a good way to autobuild the docs. I ended up just adding this to the makefile: # If you don&#8217;t have <a href=\"http:\/\/www.crccheck.com\/blog\/autobuilding-sphinx-docs\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2014-06-23T04:48:24+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2014-06-23T04:48:24+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/519","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/519\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/519\/revisions"}},"featured_image":null,"terms":{"post_tag":[{"ID":55,"name":"makefiles","slug":"makefiles","description":"","parent":null,"count":4,"link":"http:\/\/www.crccheck.com\/blog\/tag\/makefiles\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/54"}}},{"ID":49,"name":"python","slug":"python","description":"","parent":null,"count":10,"link":"http:\/\/www.crccheck.com\/blog\/tag\/python\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/48"}}}],"category":[{"ID":48,"name":"Meh Practices","slug":"meh-practices","description":"","parent":null,"count":4,"link":"http:\/\/www.crccheck.com\/blog\/category\/meh-practices\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/47"}}},{"ID":4,"name":"Nerd","slug":"technical","description":"","parent":null,"count":35,"link":"http:\/\/www.crccheck.com\/blog\/category\/technical\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/4"}}}]}},{"ID":506,"title":"Using Travis CI with your GeoDjango project","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2014\/05\/travis-fail.png\"><img class=\"aligncenter wp-image-513 size-full\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2014\/05\/travis-fail.png\" alt=\"travis fail\" width=\"830\" height=\"209\" \/><\/a><\/p>\n<p>I&#8217;m usually <a href=\"http:\/\/www.crccheck.com\/blog\/we-dont-need-no-stinkin-geo\/\" target=\"_blank\">very hesitant<\/a> to use PostGIS because it makes testing more difficult. Instead of an in-memory sqlite database, you have to spin up and down a database instead. I decided to do it anyways, and then I forgot I had Travis CI on this project and every commit emailed me a reminder of my failure.<\/p>\n<p>Luckily, a cursory search uncovered that Travis CI has support for PostGIS. And even luckier for me, it wasn&#8217;t that hard to do. I started with <a href=\"http:\/\/mattmakesmaps.com\/blog\/2014\/01\/11\/configure-postgis-with-travis-ci\/\" target=\"_blank\">this blog post<\/a>, and ended up with this as my .travis.yml:<\/p>\n<pre>language: python\r\naddons:\r\n  postgresql: \"9.3\"\r\nenv:\r\n  PYTHONPATH='.'\r\ninstall: \"pip install -r requirements-dev.txt\"\r\nbefore_script:\r\n  - psql -U postgres -c 'CREATE DATABASE tx_lobbying;'\r\n  - psql -U postgres -c \"CREATE EXTENSION postgis\" -d tx_lobbying\r\n  - psql -U postgres -c \"CREATE EXTENSION postgis_topology\" -d tx_lobbying\r\nscript: make test<\/pre>\n<p>The <code>postgresql: \"9.3\"<\/code> line wasn&#8217;t even necessary, but according to <a href=\"http:\/\/docs.travis-ci.com\/user\/using-postgresql\/\" target=\"_blank\">their docs<\/a>, Travis CI uses Postgres 9.1 by default, and I&#8217;m using 9.3. The only other change I had to make was tangential: I still had my settings set to use a SQLite database by default, but I should have made it default to a PostGIS instead.<\/p>\n<p>I feel like I should mention more about what I did in my settings.py since I&#8217;m writing this specifically about GeoDjango, but I don&#8217;t think the changes I made really had much to do getting it to run of Travis CI.<\/p>\n<p>According to the <a href=\"https:\/\/docs.djangoproject.com\/en\/1.7\/ref\/contrib\/gis\/testing\/\" target=\"_blank\">Testing GeoDjango docs<\/a>, the Django test runner would have created a <code> test_tx_lobbying<\/code> database based off a\u00a0 <code>template_postgis<\/code> Postgres template, but I short-circuited that logic on Travis CI and ended up with a solution that did not involve messing with Postgres templates.<\/p>\n<p>Now that I&#8217;ve done it once, and it wasn&#8217;t horrible, I plan on doing more things with GeoDjango that I&#8217;ve hesitated to do before. Now to find a cheap way to host toy PostGIS projects.<\/p>\n<p>Reference: https:\/\/github.com\/texastribune\/tx_lobbying\/commit\/b7119580e4cd4b6c61fc992cc5a4fc6222c6483e<\/p>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/using-travis-ci-with-your-geodjango-project\/","date":"2014-05-17T09:18:21+06:00","modified":"2014-05-17T09:18:21+06:00","format":"standard","slug":"using-travis-ci-with-your-geodjango-project","guid":"http:\/\/www.crccheck.com\/blog\/?p=506","excerpt":"<p>I&#8217;m usually very hesitant to use PostGIS because it makes testing more difficult. Instead of an in-memory sqlite database, you have to spin up and down a database instead. I decided to do it anyways, and then I forgot I had Travis CI on this project and every commit emailed me a reminder of my <a href=\"http:\/\/www.crccheck.com\/blog\/using-travis-ci-with-your-geodjango-project\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2014-05-17T15:18:21+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2014-05-17T15:18:21+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/506","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/506\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/506\/revisions"}},"featured_image":null,"terms":{"post_tag":[{"ID":52,"name":"django","slug":"django","description":"","parent":null,"count":6,"link":"http:\/\/www.crccheck.com\/blog\/tag\/django\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/51"}}},{"ID":67,"name":"geodjango","slug":"geodjango","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/geodjango\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/66"}}},{"ID":66,"name":"postgis","slug":"postgis","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/postgis\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/65"}}},{"ID":65,"name":"postgres","slug":"postgres","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/postgres\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/64"}}},{"ID":68,"name":"travis ci","slug":"travis-ci","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/travis-ci\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/67"}}}],"category":[{"ID":4,"name":"Nerd","slug":"technical","description":"","parent":null,"count":35,"link":"http:\/\/www.crccheck.com\/blog\/category\/technical\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/4"}}}]}},{"ID":502,"title":"Winter Tips","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p>Here are some winter tips from a Texan who was in Chicago that one time:<\/p>\n<ul>\n<li>Don&#8217;t layer. If it&#8217;s below 40 degrees F (4 degrees C), forget layers. Just wear a T-shirt and your good winter coat. That is seriously all you need. Don&#8217;t have a coat warm enough? Well, then you should probably layer. Would you rather put on and peel off a dozen layers as you transition from indoors to outdoors and back indoors; or just throw on a coat?<\/li>\n<li>Forget gloves. Put your hands in your pockets.<\/li>\n<li>I lied, get gloves.<strong> <\/strong>My point is: <strong>don&#8217;t<\/strong> depend on them (unless you&#8217;re biking, but that&#8217;s another story). Be prepared to lose your gloves. Ideally, the gloves you buy have clasps, hooks, and\/or velcro so you don&#8217;t lose them. I actually have a glove\/coat combo where I can peel off my gloves and stick them onto a velcro strip on the coat. Ski jackets usually have good glove storage.<\/li>\n<li>Learn how to put on and take off your gloves with your teeth.\u00a0<em>True story<\/em>: If you&#8217;re walking down the street eating your ice cream and you need to answer your phone, you don&#8217;t want to have to put down your ice cream to mess with a glove.<em><\/em><\/li>\n<li>Your nose will run. Don&#8217;t use tissues. I always carry a washcloth for this. Bicyclist will know that winter gloves are designed to have a patch for wiping your nose.<\/li>\n<li>No hats. All you need are ear warmers. Even on bike. I got these foldable ear wamers on woot a loooong time ago: <a href=\"http:\/\/www.woot.com\/offers\/eargrips-behind-the-head-fleece-ear-warmer-2-pack-dec-15\">http:\/\/www.woot.com\/offers\/eargrips-behind-the-head-fleece-ear-warmer-2-pack-dec-15<\/a> You can fold them for easy storage, and you can also carry them by wrapping them on your arm, freeing up valuable pocket space. Besides, hats mess up your hair.<\/li>\n<li>Do use scarves and hoods. Hoods are useful for dealing with wind, and scarves can be equivalent to wearing a whole layer. Learn the different way of tying a scarf. You can tie a scarf different ways to deal with different degrees.<\/li>\n<li>Pants: it doesn&#8217;t matter, and you don&#8217;t need long underwear. You can wear the same pants you wore in summer. Same goes for socks and shoes. Your jacket will cut the wind and cover the important bits. I don&#8217;t know what magic girls use to walk around in leg warmers. Maybe it&#8217;s the Uggs.<\/li>\n<\/ul>\n<p>And there you have it. With that wardrobe, I was biking around Chicago all winter in 5 degree F weather. The only modification I made for biking was I had to invest in some serious gloves. Another modification you might want is if you&#8217;re going to be standing still outdoors for a long time (why?), then you should add layers.<\/p>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/winter-tips\/","date":"2013-11-26T22:50:06+06:00","modified":"2013-11-26T22:51:25+06:00","format":"standard","slug":"winter-tips","guid":"http:\/\/www.crccheck.com\/blog\/?p=502","excerpt":"<p>Here are some winter tips from a Texan who was in Chicago that one time: Don&#8217;t layer. If it&#8217;s below 40 degrees F (4 degrees C), forget layers. Just wear a T-shirt and your good winter coat. That is seriously all you need. Don&#8217;t have a coat warm enough? Well, then you should probably layer. <a href=\"http:\/\/www.crccheck.com\/blog\/winter-tips\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2013-11-27T04:50:06+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2013-11-27T04:51:25+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/502","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/502\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/502\/revisions"}},"featured_image":null,"terms":{"post_tag":[{"ID":63,"name":"clothing","slug":"clothing","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/clothing\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/62"}}},{"ID":64,"name":"winter","slug":"winter","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/winter\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/63"}}}],"category":[{"ID":48,"name":"Meh Practices","slug":"meh-practices","description":"","parent":null,"count":4,"link":"http:\/\/www.crccheck.com\/blog\/category\/meh-practices\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/47"}}},{"ID":8,"name":"pics plz","slug":"pics-plz","description":"","parent":null,"count":3,"link":"http:\/\/www.crccheck.com\/blog\/category\/pics-plz\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/8"}}}]}},{"ID":477,"title":"Austin Burgers","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p>Burgers around central Austin, roughly in order of best to worst. Factors include price, convenience to me, and of paramount: quality.<\/p>\n<h3>Second Bar + Kitchen<\/h3>\n<p>$$$ Patty &#8211; A, Bun &#8211; A, Atmosphere &#8211; Restaurant<br \/>\nOne of the most expensive burgers, but worth it.<\/p>\n<h3>Hopdoddy<\/h3>\n<p>$$ Patty &#8211; B, Bun &#8211; A, Atmosphere &#8211; Diner<br \/>\nQuality burger. Avoid the &#8220;premium&#8221; meats as they are overpriced. Good shakes. Not worth waiting an hour in line for.<\/p>\n<h3>Roaring Fork<\/h3>\n<p>$$ Patty &#8211; B, Bun &#8211; B, Atmosphere &#8211; Steakhouse<br \/>\nThey only have one burger, the Big Ass Burger. It is great. Strong, basic ingredients (thick bacon, melty cheese). The establishment is really more a restaurant than a steakhouse, but the atmosphere is steakhouse.<\/p>\n<h3>P. Terry&#8217;s<\/h3>\n<p>$ Patty &#8211; B, Bun &#8211; C, Atmosphere &#8211; Fast Food<br \/>\nThere&#8217;s something magical about these. There&#8217;s something magical about their shakes too: they give me major gas.<\/p>\n<h3>Texas Chili Parlor<\/h3>\n<p>$$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Texas Chili Parlor<br \/>\nMy raw ratings aren&#8217;t that good, but they make a damn good burger. They don&#8217;t have fries on the menu.<\/p>\n<h3>Pluckers<\/h3>\n<p>$$ Patty &#8211; B, Bun &#8211; B, Atmosphere &#8211; Bar<br \/>\nAnother place you normally wouldn&#8217;t go to get a burger. This wing joint has a good basic burger. Patty is better than average, the bun is sometimes an A.<\/p>\n<h3>Bacon<\/h3>\n<p>$$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Cafe<br \/>\nThe bacon&#8230; is ok, but you can customize it and try different kinds of bacon.<\/p>\n<h3>Sullivan&#8217;s<\/h3>\n<p>$$ Patty &#8211; B, Bun &#8211; B, Atmosphere &#8211; Steakhouse<br \/>\nI remember this being good. Needs to be re-tested.<\/p>\n<h3>Annie&#8217;s Cafe &amp; Bar<\/h3>\n<p>$$$ Patty &#8211; B, Bun &#8211; B, Atmosphere &#8211; Cafe<br \/>\nI remember this being good. Needs to be re-tested.<\/p>\n<h3>Parkside<\/h3>\n<p>$$ Patty &#8211; B, Bun &#8211; D, Atmosphere &#8211; Restaurant<br \/>\nGood burger, overrated. Would be one of the best patties, but mine had too much gristle.<\/p>\n<h3>Iron Cactus<\/h3>\n<p>$$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Restaurant<br \/>\nThe patty is a little unusual. It&#8217;s a nicer fast food patty: fine grind and molded. The fries are lightly battered and great.<\/p>\n<h3>Whataburger<\/h3>\n<p>$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Fast Food<br \/>\nIf you&#8217;re in the mood for Whataburger, nothing else will satisfy it.<\/p>\n<h3>Player&#8217;s<\/h3>\n<p>$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Diner<br \/>\nGet &#8216;em while you can, UT owns the land under them and has the option to kick them out with six months notice. You can get a comically large shake here.<\/p>\n<h3>Wendy&#8217;s<\/h3>\n<p>Pretzel: $ Patty &#8211; C, Bun &#8211; B, Atmosphere &#8211; Fast Food<br \/>\nNot bad. Was lured here by the marketing for their pretzel bun.<\/p>\n<h3>EZ&#8217;s<\/h3>\n<p>$$ Patty &#8211; C, Bun: C, Atmosphere: Diner<br \/>\nDecent. Okay shakes, they definitely used to be better.<\/p>\n<h3>Wholly Cow<\/h3>\n<p>$$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Diner<br \/>\nConvenient. Local ingredients. Too bad they cook the hell out of &#8216;em.<\/p>\n<h3>Dirty Martin&#8217;s<\/h3>\n<p>$$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Diner<br \/>\nNeeds to be retested. I haven&#8217;t been here in over a decade.<\/p>\n<h3>Camino El Casino<\/h3>\n<p>$$ Patty &#8211; C, Bun &#8211; D, Atmosphere &#8211; Bar<br \/>\nBetter when drunk.<\/p>\n<h3>Hut&#8217;s<\/h3>\n<p>$$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Diner<br \/>\nOverrated. Avoid. I haven&#8217;t been here in probably six years, but including them for completeness.<\/p>\n<h3>24 Diner<\/h3>\n<p>$$$ Patty &#8211; C, Bun &#8211; C, Atmosphere &#8211; Diner<br \/>\nAvoid the burger, just get the chicken and waffles. Shake was weak too.<\/p>\n<h2>Other places I like but aren&#8217;t &#8220;central&#8221;<\/h2>\n<h3>Phil&#8217;s Ice House<\/h3>\n<p>$$ Patty &#8211; B, Bun &#8211; C, Atmosphere &#8211; Fast Food<\/p>\n<h2>Places to try<\/h2>\n<h3>Elevation Burger<\/h3>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/austin-burgers\/","date":"2013-07-22T00:20:49+06:00","modified":"2013-07-24T22:05:19+06:00","format":"standard","slug":"austin-burgers","guid":"http:\/\/www.crccheck.com\/blog\/?p=477","excerpt":"<p>Burgers around central Austin, roughly in order of best to worst. Factors include price, convenience to me, and of paramount: quality. Second Bar + Kitchen $$$ Patty &#8211; A, Bun &#8211; A, Atmosphere &#8211; Restaurant One of the most expensive burgers, but worth it. Hopdoddy $$ Patty &#8211; B, Bun &#8211; A, Atmosphere &#8211; Diner <a href=\"http:\/\/www.crccheck.com\/blog\/austin-burgers\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2013-07-22T06:20:49+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2013-07-25T04:05:19+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/477","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/477\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/477\/revisions"}},"featured_image":null,"terms":{"category":[{"ID":5,"name":"Finish Writing Me Plz","slug":"drafts","description":"","parent":null,"count":8,"link":"http:\/\/www.crccheck.com\/blog\/category\/drafts\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/5"}}}]}},{"ID":479,"title":"GTA IV 1.0.7 bootstrap guide","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p>There are lots of websites and youtube videos all trying to tell you how to mod GTA IV. Unfortunately, they&#8217;re almost all out of date, or youtube videos.<\/p>\n<p>I&#8217;m using steam installed Grand Theft Auto IV 1.0.7<\/p>\n<p>A decent guide: http:\/\/www.gta-modding.com\/iv\/tutorials<\/p>\n<h2>Prepping the Game<\/h2>\n<p>Install This:<\/p>\n<h3>Xliveless (v0.999b7 md5: F7FD7512F6AC8959CDDA6A2B2E014C68)<\/h3>\n<p>http:\/\/www.gtaforums.com\/?showtopic=388658<\/p>\n<h3>SparkIV (v0.7.0b1)<\/h3>\n<p>The original tool, currently trying OpenIV below instead of this.<\/p>\n<p>http:\/\/www.gtaforums.com\/?showtopic=384933<\/p>\n<h3>\u00a0OpenIV (v1.5.0)<\/h3>\n<p>Seems to be much newer than SparkIV. Still testing it out. It actually installs (as opposed to SparkIV, which you just unzip and run) and is more difficult to set up that it needs to be. Some mods require OpenIV.<\/p>\n<p>http:\/\/openiv.com\/<\/p>\n<h2>Installing a simple mod<\/h2>\n<p>Most mods will tell you exactly what to do in their readme.txt. I&#8217;ll only give installation highlights.<\/p>\n<h3>No Intro Screen<\/h3>\n<p>Who has time to look at intro screens? This mod is easy to install and well worth it. Just copy loadingscreens_pc.dat to common\/data. It&#8217;s plaintext so you can see what changes it makes.<\/p>\n<p>http:\/\/www.gta4-mods.com\/misc\/no-intro-logos-f1814<\/p>\n<h3>Rockstar Social Club<\/h3>\n<p>I couldn&#8217;t find a way to disable it. I added these to my hosts file anyways:<\/p>\n<pre>127.0.0.1 rsgames.hs.llnwd.net\r\n127.0.0.1 mls.rockstargames.com<\/pre>\n<p>At least the time saved taking off the intro screens make up for having to click through the Social Club screens.<\/p>\n<h2>Installing some intermediate mods<\/h2>\n<h3>scripthook.dll (v0.5.1 md5: 7260B388AAC8329C3CF615084AA7DB83)<\/h3>\n<p>You may need to dig around for this download; the download link in the homepage is dead. Sometimes it&#8217;s redistributed inside a mod. Just copy it into root GTAIV directory.<\/p>\n<p>homepage: http:\/\/www.gtaforums.com\/index.php?showtopic=390582<\/p>\n<h3>inGame Trainer (v1.9.0)<\/h3>\n<p>This is the trainer you see most often in youtube videos. You can change the weather, teleport, change your wanted level, enable god mode, and enable cheats. It&#8217;s not an open sandbox game without a little god mode.<\/p>\n<p>homepage: http:\/\/www.gtaforums.com\/index.php?showtopic=393676<\/p>\n<h3>CarSpawner In-Game Menu<\/h3>\n<p>The thing about this mod is that for some reason, the readme is a word doc. Don&#8217;t worry though, the text on the homepage is the exact same as what the readme says. This mod defaults to taking over F1 to open the gui, just like inGameTrainer, so you&#8217;ll need to edit at least one of them.<\/p>\n<p>http:\/\/www.gtaforums.com\/index.php?showtopic=399468<\/p>\n<h2>Installing an advanced mod<\/h2>\n<h3>Iron Man IV (v1.2)<\/h3>\n<p>See the readme.txt. It&#8217;s an involved process but detailed nicely. Remember to make backups!<\/p>\n<p>homepage: http:\/\/www.gta4-mods.com\/player\/iron-man-iv-v11-f21888<\/p>\n<p>Other noteworth mods:<\/p>\n<ul>\n<li>iCEnhancer<\/li>\n<\/ul>\n<p><iframe src=\"\/\/www.youtube.com\/embed\/videoseries?list=PLXziPx0TMtXP7peQVO4UAiTlJhXacB-Mt\" height=\"315\" width=\"560\" allowfullscreen=\"\" frameborder=\"0\"><\/iframe><\/p>\n<h2>Other hacks<\/h2>\n<h3>commandline.txt<\/h3>\n<p>http:\/\/www.gamefaqs.com\/pc\/952150-grand-theft-auto-iv\/answers?qid=20326<\/p>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/gta-iv-1-0-7-bootstrap-guide\/","date":"2013-07-20T12:27:19+06:00","modified":"2013-07-20T12:28:14+06:00","format":"standard","slug":"gta-iv-1-0-7-bootstrap-guide","guid":"http:\/\/www.crccheck.com\/blog\/?p=479","excerpt":"<p>There are lots of websites and youtube videos all trying to tell you how to mod GTA IV. Unfortunately, they&#8217;re almost all out of date, or youtube videos. I&#8217;m using steam installed Grand Theft Auto IV 1.0.7 A decent guide: http:\/\/www.gta-modding.com\/iv\/tutorials Prepping the Game Install This: Xliveless (v0.999b7 md5: F7FD7512F6AC8959CDDA6A2B2E014C68) http:\/\/www.gtaforums.com\/?showtopic=388658 SparkIV (v0.7.0b1) The original <a href=\"http:\/\/www.crccheck.com\/blog\/gta-iv-1-0-7-bootstrap-guide\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2013-07-20T18:27:19+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2013-07-20T18:28:14+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/479","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/479\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/479\/revisions"}},"featured_image":null,"terms":{"category":[{"ID":5,"name":"Finish Writing Me Plz","slug":"drafts","description":"","parent":null,"count":8,"link":"http:\/\/www.crccheck.com\/blog\/category\/drafts\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/5"}}},{"ID":3,"name":"Life=Boring","slug":"personal","description":"","parent":null,"count":13,"link":"http:\/\/www.crccheck.com\/blog\/category\/personal\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/3"}}},{"ID":48,"name":"Meh Practices","slug":"meh-practices","description":"","parent":null,"count":4,"link":"http:\/\/www.crccheck.com\/blog\/category\/meh-practices\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/47"}}}],"post_tag":[{"ID":62,"name":"gtaiv","slug":"gtaiv","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/gtaiv\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/61"}}}]}},{"ID":431,"title":"Boating Lake, aka Photoshop is still useful for the web","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p><iframe src=\"http:\/\/crccheck.github.io\/boating-lake\/\" height=\"300\" width=\"100%\" frameborder=\"0\"><\/iframe><\/p>\n<p>So I made a silly thing one evening. I&#8217;ve embedded it above, and you can see the source at <a href=\"https:\/\/github.com\/crccheck\/boating-lake\" target=\"_blank\">https:\/\/github.com\/crccheck\/boating-lake<\/a> for more details about the inspiration and implementation. I thought my two readers might be interested in my process for preparing the graphics.<\/p>\n<h2>Finding the source<\/h2>\n<p>A quick Internet search revealed <a href=\"https:\/\/secure.flickr.com\/photos\/tomgauld\/4695780606\/in\/photostream\/\" target=\"_blank\">a clean source<\/a> for the comic. I downloaded it and brought it into Photoshop.<\/p>\n<h2>Creating a mask from line art<\/h2>\n<p>Making cutouts is the infantry of the Photoshop army. There are more tools and techniques for making cutouts than any other Photoshop task; I thought I&#8217;d show favorite technique of cutting out line art.<\/p>\n<p style=\"text-align: center;\"><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step1-original.jpg\"><img class=\"aligncenter size-medium wp-image-434\" alt=\"boating-lake-step1-original\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step1-original-300x213.jpg\" width=\"300\" height=\"213\" \/><\/a><\/p>\n<p>Duplicate the layer to preserve your original. The goal of the next steps is to use the art as its own alpha mask. <strong>Select All<\/strong> (Ctrl+A), <strong>Copy<\/strong> (Ctrl+C), <strong>Create a layer mask<\/strong>, Alt+Click to\u00a0<strong>Enter the layer mask<\/strong>, <strong>Paste<\/strong> (Ctrl+P), and then <strong>Invert the the mask <\/strong>(Ctrl+I).<\/p>\n<p>If you exit the mask, you&#8217;ll see that you&#8217;ve sort of created a mask without using a brush, eraser, lasso, or wand!<\/p>\n<p style=\"text-align: center;\"><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step2-inverted-mask.jpg\"><img class=\"aligncenter size-medium wp-image-446\" alt=\"boating-lake-step2-inverted-mask\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step2-inverted-mask-300x213.jpg\" width=\"300\" height=\"213\" \/><\/a><\/p>\n<p>Now to fix the alpha, go back and re-enter the layer mask (Alt+click the mask in the Layers palette).<\/p>\n<p><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step3-edit-mask-alpha.jpg\"><img class=\"aligncenter size-medium wp-image-436\" alt=\"boating-lake-step3-edit-mask-alpha\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step3-edit-mask-alpha-300x213.jpg\" width=\"300\" height=\"213\" \/><\/a><\/p>\n<p>Edit the mask&#8217;s <strong>levels<\/strong> (Ctrl+L). I&#8217;m going to make a mask for the characters in the &#8220;Key&#8221; area first, so I&#8217;ll <strong>set the black point<\/strong> and <strong>white point<\/strong> accordingly.<\/p>\n<p><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points.jpg\"><img class=\"aligncenter size-medium wp-image-438\" alt=\"boating-lake-step4-mask-black-white-points\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points-300x213.jpg\" width=\"300\" height=\"213\" \/><\/a><\/p>\n<p>It&#8217;s a good idea to <strong>tighten up the black point and white point<\/strong> a bit to make the alpha cleaner.<\/p>\n<p><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step5-mask-black-white-points2.jpg\"><img class=\"aligncenter size-medium wp-image-439\" alt=\"boating-lake-step5-mask-black-white-points2\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step5-mask-black-white-points2-300x213.jpg\" width=\"300\" height=\"213\" \/><\/a><\/p>\n<p>Now I have a nice mask for the characters.<\/p>\n<p><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step6-masked.jpg\"><img class=\"aligncenter size-medium wp-image-440\" alt=\"boating-lake-step6-masked\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step6-masked-300x213.jpg\" width=\"300\" height=\"213\" \/><\/a><\/p>\n<p>Now I just <strong>Copy Merged<\/strong> (Shift+Ctrl+C)\/<strong>Paste<\/strong> (Ctrl+V) each shape into its own layer. I kept finding mistakes and had to go back to fill in the robot&#8217;s face, and resize the characters to be 15% smaller so they would fit in the boats.<\/p>\n<p>The process is the same for getting the boat and waves, except you pick the water as the black point for the layer mask.<\/p>\n<p><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step7-lake-mask-black-white.jpg\"><img class=\"aligncenter size-medium wp-image-441\" alt=\"boating-lake-step7-lake-mask-black-white\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step7-lake-mask-black-white-300x213.jpg\" width=\"300\" height=\"213\" \/><\/a><\/p>\n<p>Repeat this process to create a mask for any other element you want to isolate. I also grabbed the title and the entire key.<\/p>\n<h2>Automating the export<\/h2>\n<p>To export each sprite, make sure their layer is visible, and hide all the rest.<\/p>\n<p>Then go to <em>File -&gt; Scripts -&gt; Export Layers to Files&#8230;<\/em><\/p>\n<p><a href=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step8-export.jpg\"><img class=\"aligncenter size-medium wp-image-442\" alt=\"boating-lake-step8-export\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step8-export-300x296.jpg\" width=\"300\" height=\"296\" \/><\/a><\/p>\n<p>Make sure <em>File Name Prefix<\/em> is empty, <em>File Type<\/em> is PNG, <em>Transparency<\/em> is on, and <em>Trim Layers<\/em> is on. The process may take some time, but you&#8217;ll end up with a nice pile of sprites.<\/p>\n<h2>Extra Hints<\/h2>\n<ul>\n<li>Depending on how clean the source material is, you&#8217;ll probably want to run the &#8220;Despeckle&#8221; de-noising filter to remove jpeg noise.<\/li>\n<li>If your alpha isn&#8217;t very clean, you can try tightening the black point of the layer mask.<\/li>\n<li>I have a layer called &#8220;bg fill&#8221; that I usually fill with a solid color. I use this to help catch mask spills and refine edges.<\/li>\n<li>If you need to do isolated manual cleaning on a layer, I create a new document with just that layer. There&#8217;s a shortcut for doing this! <em>Layer -&gt; Duplicate Layer&#8230; <\/em>Then set the Destination Document to &#8220;New&#8221;.<\/li>\n<li>You&#8217;ll notice the file names look like\u00a0 <code>_0000_boat.png<\/code> or <code>_0000s_0001_robot.png<\/code>. The number is the layer number, and multiple numbers mean it was in a group. I once wrote a Photoshop script that did the same thing but without those numbers, but Photoshop&#8217;s built in script got better, and I didn&#8217;t feel like upgrading my script, so I just use the built in script now and manually clean off the numbers. If you need to do a lot of files, you can use a mass file renamer (For Windows, I recommend <a href=\"http:\/\/www.den4b.com\/?x=downloads&amp;product=renamer\" target=\"_blank\">ReNamer<\/a> by den4b, which has preview and supports regular expressions).<\/li>\n<li>To speed up the export, delete as many hidden layers as possible. The script isn&#8217;t very smart.<\/li>\n<\/ul>\n<h2>Errata<\/h2>\n<p>I ended up exporting the waves separately for some reason, so they&#8217;re not documented here. Also, I prefer Photoshop for Windows over Mac.<\/p>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/photoshop-is-still-useful\/","date":"2013-05-15T22:39:22+06:00","modified":"2013-05-15T22:39:22+06:00","format":"standard","slug":"photoshop-is-still-useful","guid":"http:\/\/www.crccheck.com\/blog\/?p=431","excerpt":"<p>So I made a silly thing one evening. I&#8217;ve embedded it above, and you can see the source at https:\/\/github.com\/crccheck\/boating-lake for more details about the inspiration and implementation. I thought my two readers might be interested in my process for preparing the graphics. Finding the source A quick Internet search revealed a clean source for <a href=\"http:\/\/www.crccheck.com\/blog\/photoshop-is-still-useful\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2013-05-16T04:39:22+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2013-05-16T04:39:22+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/431","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/431\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/431\/revisions"}},"featured_image":{"ID":438,"title":"boating-lake-step4-mask-black-white-points","status":"inherit","type":"attachment","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p class=\"attachment\"><a href='http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points.jpg'><img width=\"300\" height=\"213\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points-300x213.jpg\" class=\"attachment-medium\" alt=\"boating-lake-step4-mask-black-white-points\" \/><\/a><\/p>\n","parent":431,"link":"http:\/\/www.crccheck.com\/blog\/photoshop-is-still-useful\/boating-lake-step4-mask-black-white-points\/","date":"2013-05-15T21:52:20+06:00","modified":"2013-05-15T21:52:20+06:00","format":"standard","slug":"boating-lake-step4-mask-black-white-points","guid":"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points.jpg","excerpt":null,"menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2013-05-16T03:52:20+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2013-05-16T03:52:20+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/media\/438","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/media","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/media\/438\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/media\/438\/revisions","up":"http:\/\/www.crccheck.com\/blog\/wp-json\/media\/431"}},"terms":[],"source":"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points.jpg","is_image":true,"attachment_meta":{"width":1010,"height":720,"file":"2013\/05\/boating-lake-step4-mask-black-white-points.jpg","sizes":{"thumbnail":{"file":"boating-lake-step4-mask-black-white-points-150x150.jpg","width":150,"height":150,"mime-type":"image\/jpeg","url":"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points-150x150.jpg"},"medium":{"file":"boating-lake-step4-mask-black-white-points-300x213.jpg","width":300,"height":213,"mime-type":"image\/jpeg","url":"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points-300x213.jpg"},"AWD_facebook_ogimage":{"file":"boating-lake-step4-mask-black-white-points-200x200.jpg","width":200,"height":200,"mime-type":"image\/jpeg","url":"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/boating-lake-step4-mask-black-white-points-200x200.jpg"}},"image_meta":{"aperture":0,"credit":"","camera":"","caption":"","created_timestamp":0,"copyright":"","focal_length":0,"iso":0,"shutter_speed":0,"title":""}}},"terms":{"category":[{"ID":21,"name":"Case Study","slug":"case-study","description":"","parent":null,"count":11,"link":"http:\/\/www.crccheck.com\/blog\/category\/case-study\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/21"}}},{"ID":4,"name":"Nerd","slug":"technical","description":"","parent":null,"count":35,"link":"http:\/\/www.crccheck.com\/blog\/category\/technical\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/4"}}},{"ID":20,"name":"Portfolio","slug":"portfolio","description":"","parent":null,"count":6,"link":"http:\/\/www.crccheck.com\/blog\/category\/portfolio\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/20"}}}],"post_tag":[{"ID":13,"name":"photoshop","slug":"ps","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/ps\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/13"}}}]}},{"ID":347,"title":"Dissecting Elevators Part 8: deploying","status":"publish","type":"post","author":{"ID":1,"username":"admin","name":"crccheck","first_name":"Chris","last_name":"","nickname":"crccheck","slug":"admin","URL":"http:\/\/crccheck.com","avatar":"http:\/\/1.gravatar.com\/avatar\/52f1881705d0bb7d7250284a56570b54?s=96","description":"","registered":"2008-03-03T01:52:52+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","archives":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1\/posts"}}},"content":"<p>If you <a href=\"https:\/\/github.com\/texastribune\/tx_elevators\/tree\/2013-april-fools\" target=\"_blank\">examine the repo<\/a>, you&#8217;ll see it&#8217;s a Django app; and the Procfile and requirements.txt would make you think the app itself was deployed on Heroku, but you would be wrong!<\/p>\n<p>You may be surprised to find out that the Elevators Explorer is a static HTML app. Or maybe not if you read the previous seven parts. This was inspired by NPR Apps&#8217;s <a href=\"https:\/\/github.com\/nprapps\/app-template\" target=\"_blank\">app-templates project<\/a> and general malaise dealing with servers. At The Texas Tribune, we&#8217;ve talked about turning our data apps into static files; the general reasons being:<\/p>\n<ol>\n<li>Data apps are generally not dynamic. Making a server render the same output over and over is a waste of resources and takes away resources from rendering truly dynamic content.<\/li>\n<li>Static sites do not go down. When they do go down, you&#8217;ve got big problems.<\/li>\n<li>They don&#8217;t need fancy infrastructure. No database, no caching, no app server, no media server. They are the easiest kind of website to deploy.<\/li>\n<\/ol>\n<p>So how do you turn a site served from a fancy framework like Django into a static site? Let&#8217;s start by looking at what I actually do in my terminal:<\/p>\n<ol>\n<li>I make sure my local dev server is running. For now that looks like <code>python manage.py runserver 0.0.0.0:8000<\/code>.<\/li>\n<li>In another window, I run <code>make site; make upload<\/code>. I can&#8217;t do <code>make site upload<\/code> right now because I need to handle a non-zero exit status in\u00a0 <code>make site<\/code>.<\/li>\n<\/ol>\n<h2>make site<\/h2>\n<p>And now looking at the <code>make site<\/code>\u00a0command in my\u00a0<a href=\"https:\/\/github.com\/texastribune\/tx_elevators\/blob\/2013-april-fools\/Makefile#L41-L59\" target=\"_blank\">Makefile<\/a>, here&#8217;s the abridged version of that command:<\/p>\n<pre>site:\r\n    cd site &amp;&amp; wget -r localhost:8000 --force-html -e robots=off -nH -nv --max-redirect 0<\/pre>\n<p>And the detailed breakdown of that command:<\/p>\n<ul>\n<li><code>cd site<\/code>: this is the working directory I want the files downloaded to.<\/li>\n<li><code>wget<\/code>: this is the command that does the actual work. &#8220;GNU Wget is a free utility for non-interactive download of files from the Web.&#8221;<\/li>\n<li>-<code>r<\/code>: recursive<\/li>\n<li><code>localhost:8000<\/code>: the host to download files from<\/li>\n<li><code>--force-html<\/code>: Without this, wget would not interpret the django trailing-slash urls as html<\/li>\n<li><code>-e robots=off<\/code>: Not really necessary, but does prevent a 404 request to robots.txt<\/li>\n<li><code>-nH<\/code>: Disable generation of host-prefixed directories so the file paths are cleaner<\/li>\n<li><code>-nv<\/code>: Turn off verbose without being completely quiet, but no so quiet that I wouldn&#8217;t see errors<\/li>\n<li><code>--max-redirect 0<\/code>: Right now I&#8217;m using OpenDNS, and when I do hit a 404, this keeps me from downloading OpenDNS&#8217;s stupid search page.<\/li>\n<\/ul>\n<p>If you&#8217;re interested in wget, I highly recommend skimming the <a href=\"https:\/\/www.gnu.org\/software\/wget\/manual\/wget.html\" target=\"_blank\">wget manual<\/a> to learn about other cool options and checking out <a href=\"http:\/\/www.commandlinefu.com\/commands\/tagged\/152\/wget\" target=\"_blank\">commandlinefu&#8217;s wget recipes<\/a>.<\/p>\n<div id=\"attachment_387\" style=\"width: 610px\" class=\"wp-caption aligncenter\"><a href=\"https:\/\/www.gnu.org\/software\/wget\/manual\/wget.html\"><img class=\"size-full wp-image-387 \" alt=\"\" src=\"http:\/\/www.crccheck.com\/blog\/wp-content\/uploads\/2013\/05\/reading_rainbow_wget.jpg\" width=\"600\" height=\"375\" \/><\/a><p class=\"wp-caption-text\">Levar Burton enjoys reading UNIX Man pages, so should you!<\/p><\/div>\n<p style=\"text-align: left;\">Out of the box, wget will do a very job of getting everything needed to build a Django site, as long as you aren&#8217;t using AJAX to pull things in. But the Elevator Explorer <em>does<\/em> use AJAX. To trick wget into downloading these, I added <a href=\"https:\/\/github.com\/texastribune\/tx_elevators\/blob\/2013-april-fools\/tx_elevators\/templates\/tx_elevators\/building_list.html#L43-L44\" target=\"_blank\">hints to the templates<\/a>:<\/p>\n<pre id=\"LC44\">&lt;script src=\"{{ STATIC_URL }}tx_elevators\/js\/search.js\"&gt;&lt;\/script&gt;\r\n&lt;a class=\"prefetch-hint\" href=\"\/chart\/search\/data.json\" rel=\"nofollow\" style=\"display: none;\"&gt;&lt;\/a&gt;<\/pre>\n<p>In the future, I think I&#8217;ll refine this by putting the anchor directly before the script tag, switch to using the <code>{% url %}<\/code> templatetag, and then you can get at that url with something like this jQuery pseudocode:<\/p>\n<pre>&lt;a href=\"{% url 'my_data_source' %}\"&gt;&lt;\/a&gt;\r\n&lt;script&gt;\r\n  var url = $('script:last').prev().attr('href'); $.ajax(url, ...);\r\n&lt;\/script&gt;<\/pre>\n<p>This will hopefully be a decent solution the common problem of trying to use named Django urls in JavaScript. The next problem I discovered is that I needed the json I sent to look like a file to wget so it wouldn&#8217;t mangle it to index.html (breaking the requests inside the static site). I just changed the url patterns to end in &#8220;.json$&#8221; instead of &#8220;\/$&#8221; in <a href=\"https:\/\/github.com\/texastribune\/tx_elevators\/commit\/36f276ec6f01c2787d061b44895eb7d747eb1bf1\">36f276<\/a>.<\/p>\n<p>Another idea I might try is using the\u00a0&lt;<code>link&gt;<\/code> tag, but I&#8217;d have to make sure wget still downloaded the resources, and you can only put them in\u00a0<code>&lt;head&gt;<\/code>.<\/p>\n<h2>make upload<\/h2>\n<p>The next part of the process is to upload the site directory someplace. I chose to use S3 and its ability to host a static site. A regular webhost would also work, and might even work better if you had the ability to use rsync instead of what I had to do. But let&#8217;s continue and go into what exactly I did, starting with the <a href=\"https:\/\/github.com\/texastribune\/tx_elevators\/blob\/2013-april-fools\/Makefile#L58-L59\" target=\"_blank\">make command<\/a>:<\/p>\n<pre id=\"LC59\">upload:\r\n    python $(PROJECT)\/manage.py sync_s3 --dir site --gzip<\/pre>\n<p>The <code>sync_s3<\/code> command here is a basic fork of django-extensions&#8217;s\u00a0<a href=\"http:\/\/pythonhosted.org\/django-extensions\/sync_media_s3.html\" target=\"_blank\"> <code>sync_media_s3<\/code> command<\/a>. I only made <a href=\"https:\/\/github.com\/texastribune\/tx_elevators\/commit\/3c0006e9c385d1fcba08f2eca25f4d859cf23788\" target=\"_blank\">one tweak<\/a> to it to so it&#8217;ll gzip json and html too. If you don&#8217;t need that, you can use the original <code>sync_media_s3<\/code> command. To set up the credentials for S3, you can either read\u00a0<a href=\"http:\/\/pythonhosted.org\/django-extensions\/sync_media_s3.html\" target=\"_blank\">django-extensions&#8217;s docs<\/a>\u00a0or just try it. The error messages will tell you exactly what you need to fix whatever doesn&#8217;t work. I will point out that \u00a0the source directory is set by the <code>--dir<\/code>\u00a0flag, and the destination S3 bucket is controlled by the general configuration.<\/p>\n<h2>Performance<\/h2>\n<p>We know the performance of a static website is awesome, but the trade-off is it&#8217;s slow to do the work up front of generating a static website from a dynamic one. You may have noticed the <em>terrible<\/em>\u00a0timing figures documented in the makefile. It takes over half an hour to crawl the site, and over three hours to upload to S3. I fiddle a few knobs in a futile effort to speed things up: turning off debug and using gunicorn, but they didn&#8217;t help. There are some other ideas I pondered for improving performance:<\/p>\n<ul>\n<li>It would be possible to write a django specific spider instead of wget that could read the url patterns. This is what app-template does for flask if you look at its\u00a0<a href=\"https:\/\/github.com\/nprapps\/app-template\/blob\/ba24ad4d891c92d27f87fccdcb044bd155012206\/fabfile.py#L127-L180\" target=\"_blank\">fab render task<\/a>.<\/li>\n<li>I could make the process multi-threaded. There are some alternatives to wget, but wget is good at what it does and is ubiquitous. I&#8217;d rather speed up the upload process. Github user\u00a0billyvg\u00a0did some work on making <code>sync_media_s3<\/code> multithreaded in <a href=\"https:\/\/github.com\/django-extensions\/django-extensions\/pull\/161\" target=\"_blank\">issue #161<\/a>.<\/li>\n<\/ul>\n<p>Other ideas that are probably bad ideas or not worth the effort:<\/p>\n<ul>\n<li>Combine the download\/upload steps<\/li>\n<li>Prioritize pages so important pages are updated first<\/li>\n<\/ul>\n<p>And for comparison, using rsync is so much faster it seems silly not to use it:<\/p>\n<pre>time rsync -avz site\/ remote:elevators\r\nsent 45200666 bytes\u00a0 received 561995 bytes\u00a0 92356.53 bytes\/sec\r\ntotal size is 123778877\u00a0 speedup is 2.70\r\n\r\nreal\u00a0\u00a0 \u00a08m14.409s<\/pre>\n<h2>Conclusion<\/h2>\n<p>For staging, I <em>did<\/em> deploy to Heroku. But I didn&#8217;t want to pay to keep a database online (this app exceeds the free database limit of 10,000 rows) and I didn&#8217;t know how much traffic I could serve from the free tier. The static site worked really well, except for the 4 hour deploys. I think it&#8217;s possible to get it to 2 hours, which is great for a 25,000 page site.<\/p>\n","parent":0,"link":"http:\/\/www.crccheck.com\/blog\/dissecting-elevators-part-8-deploying\/","date":"2013-05-11T00:12:41+06:00","modified":"2013-05-11T00:12:41+06:00","format":"standard","slug":"dissecting-elevators-part-8-deploying","guid":"http:\/\/www.crccheck.com\/blog\/?p=347","excerpt":"<p>If you examine the repo, you&#8217;ll see it&#8217;s a Django app; and the Procfile and requirements.txt would make you think the app itself was deployed on Heroku, but you would be wrong! You may be surprised to find out that the Elevators Explorer is a static HTML app. Or maybe not if you read the <a href=\"http:\/\/www.crccheck.com\/blog\/dissecting-elevators-part-8-deploying\/\"> read more <span class=\"meta-nav\">&raquo;<\/span><\/a><\/p>\n","menu_order":0,"comment_status":"open","ping_status":"open","sticky":false,"date_tz":"Etc\/GMT-6","date_gmt":"2013-05-11T06:12:41+00:00","modified_tz":"Etc\/GMT-6","modified_gmt":"2013-05-11T06:12:41+00:00","meta":{"links":{"self":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/347","author":"http:\/\/www.crccheck.com\/blog\/wp-json\/users\/1","collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts","replies":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/347\/comments","version-history":"http:\/\/www.crccheck.com\/blog\/wp-json\/posts\/347\/revisions"}},"featured_image":null,"terms":{"category":[{"ID":21,"name":"Case Study","slug":"case-study","description":"","parent":null,"count":11,"link":"http:\/\/www.crccheck.com\/blog\/category\/case-study\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/21"}}},{"ID":4,"name":"Nerd","slug":"technical","description":"","parent":null,"count":35,"link":"http:\/\/www.crccheck.com\/blog\/category\/technical\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/category\/terms\/4"}}}],"post_tag":[{"ID":52,"name":"django","slug":"django","description":"","parent":null,"count":6,"link":"http:\/\/www.crccheck.com\/blog\/tag\/django\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/51"}}},{"ID":55,"name":"makefiles","slug":"makefiles","description":"","parent":null,"count":4,"link":"http:\/\/www.crccheck.com\/blog\/tag\/makefiles\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/54"}}},{"ID":49,"name":"python","slug":"python","description":"","parent":null,"count":10,"link":"http:\/\/www.crccheck.com\/blog\/tag\/python\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/48"}}},{"ID":61,"name":"s3","slug":"s3","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/s3\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/60"}}},{"ID":60,"name":"wget","slug":"wget","description":"","parent":null,"count":1,"link":"http:\/\/www.crccheck.com\/blog\/tag\/wget\/","meta":{"links":{"collection":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms","self":"http:\/\/www.crccheck.com\/blog\/wp-json\/taxonomies\/post_tag\/terms\/59"}}}]}}]